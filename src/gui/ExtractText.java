/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import core.LSBEncoding;
import core.ImageUtility;
import core.ImageFileFilter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

public class ExtractText extends javax.swing.JFrame {

    JFileChooser fileChooser;
    File textFile;
    BufferedImage coverImage;
    ImageUtility imageUtility;
    ColorModel coverImageColorModel;
    File openedFile;
    String secretMessage;
    JFileChooser textFileSaver = new JFileChooser();
    
    // an array to hold all bits checkboxes
    JCheckBox bitsCheckBoxArray[] = new JCheckBox[8];
    
    /**
     * Creates new form ExtractText
     */
    public ExtractText() {
        initComponents();
        
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener( new WindowAdapter()
        {
            public void windowClosing(WindowEvent e)
            {   
                setVisible(false);
                dispose();
                new DataExtractOption().setVisible(true);
            }
        });
        fileChooser = new JFileChooser();
        imageUtility = new ImageUtility();
        textFileSaver.setFileFilter(new FileNameExtensionFilter("Textfile", "txt"));
        textFileSaver.setAcceptAllFileFilterUsed(false);

        bitsCheckBoxArray[0] = bit0CheckBox;
        bitsCheckBoxArray[1] = bit1CheckBox;
        bitsCheckBoxArray[2] = bit2CheckBox;
        bitsCheckBoxArray[3] = bit3CheckBox;
        bitsCheckBoxArray[4] = bit4CheckBox;
        bitsCheckBoxArray[5] = bit5CheckBox;
        bitsCheckBoxArray[6] = bit6CheckBox;
        bitsCheckBoxArray[7] = bit7CheckBox;
        jLabel3.setVisible(false);
        saveTextFileButton.setVisible(false);
        String text="SELECT MODIFY BIT(s)(same as choosen to hide)";
        jLabel2.setText(text);
        outputTextArea.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        modifyBitsPanel = new javax.swing.JPanel();
        bit7CheckBox = new javax.swing.JCheckBox();
        bit6CheckBox = new javax.swing.JCheckBox();
        bit5CheckBox = new javax.swing.JCheckBox();
        bit4CheckBox = new javax.swing.JCheckBox();
        bit3CheckBox = new javax.swing.JCheckBox();
        bit2CheckBox = new javax.swing.JCheckBox();
        bit1CheckBox = new javax.swing.JCheckBox();
        bit0CheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        chooseCoverImageButton = new javax.swing.JButton();
        extractTextButton = new javax.swing.JButton();
        outputTextArea = new java.awt.TextArea();
        coverImageLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        saveTextFileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Extract Text");

        jLabel1.setText("Choose Cover Image:");

        modifyBitsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Modify Bits"));

        bit7CheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bit7CheckBox.setText("7");

        bit6CheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bit6CheckBox.setText("6");

        bit5CheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bit5CheckBox.setText("5");

        bit4CheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bit4CheckBox.setText("4");

        bit3CheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bit3CheckBox.setText("3");

        bit2CheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bit2CheckBox.setText("2");

        bit1CheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bit1CheckBox.setText("1");

        bit0CheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        bit0CheckBox.setText("0");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("SELECT MODIFY BIT(s) (same as chosen to hide)");

        javax.swing.GroupLayout modifyBitsPanelLayout = new javax.swing.GroupLayout(modifyBitsPanel);
        modifyBitsPanel.setLayout(modifyBitsPanelLayout);
        modifyBitsPanelLayout.setHorizontalGroup(
            modifyBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyBitsPanelLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28)
                .addComponent(bit7CheckBox)
                .addGap(18, 18, 18)
                .addComponent(bit6CheckBox)
                .addGap(18, 18, 18)
                .addComponent(bit5CheckBox)
                .addGap(18, 18, 18)
                .addComponent(bit4CheckBox)
                .addGap(18, 18, 18)
                .addComponent(bit3CheckBox)
                .addGap(18, 18, 18)
                .addComponent(bit2CheckBox)
                .addGap(18, 18, 18)
                .addComponent(bit1CheckBox)
                .addGap(18, 18, 18)
                .addComponent(bit0CheckBox)
                .addContainerGap())
        );
        modifyBitsPanelLayout.setVerticalGroup(
            modifyBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyBitsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modifyBitsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(bit0CheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bit1CheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bit2CheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bit3CheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bit4CheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bit5CheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bit6CheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bit7CheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        chooseCoverImageButton.setText("Choose Cover Image");
        chooseCoverImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseCoverImageButtonActionPerformed(evt);
            }
        });

        extractTextButton.setText("Extract Text");
        extractTextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractTextButtonActionPerformed(evt);
            }
        });

        outputTextArea.setEditable(false);
        outputTextArea.setEnabled(false);
        outputTextArea.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        coverImageLabel.setForeground(new java.awt.Color(140, 56, 104));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Extracted Message :");

        saveTextFileButton.setText("SAVE AS TEXT FILE");
        saveTextFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTextFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(extractTextButton)
                .addGap(34, 34, 34)
                .addComponent(saveTextFileButton)
                .addGap(142, 142, 142))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(modifyBitsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooseCoverImageButton)
                            .addGap(47, 47, 47)
                            .addComponent(coverImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(outputTextArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coverImageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chooseCoverImageButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(modifyBitsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(extractTextButton, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(saveTextFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        outputTextArea.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chooseCoverImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseCoverImageButtonActionPerformed
        fileChooser.setDialogTitle("Select an encoded image");
        ImageFileFilter imageFilter = new ImageFileFilter();
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = fileChooser.getSelectedFile();
            String name = openedFile.getName();
            try {
                if (imageFilter.isPNGOrBMPImage(name)) {
                    coverImage = ImageIO.read(openedFile);

                    // converting original image to suitable type
                    BufferedImage currentImage
                            = imageUtility.convertImage(coverImage);
                    if (currentImage != null) {
                        coverImage = currentImage;
                    }

                    coverImageColorModel = coverImage.getColorModel();
                    coverImageLabel.setText(name + ", size: "
                            + openedFile.length() / 1024 + " KB, "
                            + coverImage.getWidth() + "X"
                            + coverImage.getHeight());
                } else {
                    alert("Please select only .png or .bmp image");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_chooseCoverImageButtonActionPerformed

    private void extractTextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractTextButtonActionPerformed
        if (coverImage == null) {
            alert("No cover Image selected");
            return;
        }
        LSBEncoding lsbEncoding = new LSBEncoding();
        int bitArray[] = new int[8];
        for (int i = 0; i < 8; i++) {
            if (bitsCheckBoxArray[i].isSelected()) {
                bitArray[i] = 1;
            } else {
                bitArray[i] = 0;
            }
        }
        String message = lsbEncoding.decodeText(coverImage, bitArray);
        char ch[]=message.toCharArray();
        message="";
        for(int i=0;i<ch.length;i++)
        {
         if((ch[i]>=65)&&(ch[i]<=92)|| (ch[i]>=97)&&(ch[i]<122) || (ch[i]>=48) && (ch[i]<58) || ch[i]==' '||ch[i]=='.'||ch[i]==',')
         {
             message+=ch[i];
         }
        }
        secretMessage=message;
        jLabel3.setVisible(true);
        outputTextArea.setVisible(true);
        outputTextArea.setEnabled(true);
        outputTextArea.setEditable(true);
        outputTextArea.setText(message);
        outputTextArea.setEditable(false);
        jLabel1.setVisible(false);
        chooseCoverImageButton.setVisible(false);
        coverImageLabel.setVisible(false);
        jLabel2.setText("SELECTED MODIFY BIT(s) (same as choosen to hide)");
        jLabel2.setEnabled(false);
        modifyBitsPanel.setEnabled(false);
        bit0CheckBox.setEnabled(false);
        bit1CheckBox.setEnabled(false);
        bit2CheckBox.setEnabled(false);
        bit3CheckBox.setEnabled(false);
        bit4CheckBox.setEnabled(false);
        bit5CheckBox.setEnabled(false);
        bit6CheckBox.setEnabled(false);
        bit7CheckBox.setEnabled(false);
        extractTextButton.setVisible(false);
        saveTextFileButton.setVisible(true);
        //outputTextArea.setEnabled(false);
    }//GEN-LAST:event_extractTextButtonActionPerformed

    private void saveTextFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTextFileButtonActionPerformed
        // TODO add your handling code here:
        export(secretMessage, saveFile(textFileSaver));
        
    }//GEN-LAST:event_saveTextFileButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExtractText.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExtractText.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExtractText.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExtractText.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExtractText().setVisible(true);
            }
        });
    }
    
    private void alert(String message) {
        JOptionPane.showMessageDialog(null, message);
    }
    
    
    /**
  * This method saves a String to a textfile.
  *
  * @param text the String that should be saved
  * @param outputFile the File in which the text should be saved
  */
  public void export(String text, File outputFile) {
    PrintWriter out = null;
    try {
      out = new PrintWriter(outputFile);
      out.println(text);
    } catch (FileNotFoundException e) {
      e.printStackTrace();
    } finally {
     if (out != null)
        out.close();
    }
  }
  
  /**
  * This method lets the user pick a file in a directory using a JFileChooser for saving a file.
  *
  * @param chooser the JFileChooser that is being used
  */
  public File saveFile(JFileChooser chooser) {
   int dialog = chooser.showSaveDialog(this);
   if (dialog == JFileChooser.APPROVE_OPTION) {
     return chooser.getSelectedFile();
   } else if (dialog == JFileChooser.CANCEL_OPTION) {
     return chooser.getSelectedFile();
   } else {
     return new File("");
   }
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bit0CheckBox;
    private javax.swing.JCheckBox bit1CheckBox;
    private javax.swing.JCheckBox bit2CheckBox;
    private javax.swing.JCheckBox bit3CheckBox;
    private javax.swing.JCheckBox bit4CheckBox;
    private javax.swing.JCheckBox bit5CheckBox;
    private javax.swing.JCheckBox bit6CheckBox;
    private javax.swing.JCheckBox bit7CheckBox;
    private javax.swing.JButton chooseCoverImageButton;
    private javax.swing.JLabel coverImageLabel;
    private javax.swing.JButton extractTextButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel modifyBitsPanel;
    private java.awt.TextArea outputTextArea;
    private javax.swing.JButton saveTextFileButton;
    // End of variables declaration//GEN-END:variables
}

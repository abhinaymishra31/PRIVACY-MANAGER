/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.JFileChooser;
import core.LSBImageEncoding;
import java.awt.Graphics2D;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


public class HideImage extends javax.swing.JFrame {
    
    private JFileChooser containerChooser = new JFileChooser();
    private JFileChooser hideChooser = new JFileChooser();
    private File containerFile;
    private File hideFile;
    private JFileChooser imgSaver = new JFileChooser();
    private LSBImageEncoding lsbImageEncoding = new LSBImageEncoding();
    private File directory = containerChooser.getCurrentDirectory();
    BufferedImage coverImage;
    BufferedImage hideImage;
    

    /**
     * Creates new form HideImage
     */
    public HideImage() {
        initComponents();
        
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener( new WindowAdapter()
        {
            public void windowClosing(WindowEvent e)
            {   
                setVisible(false);
                dispose();
                new DataHideOption().setVisible(true);
            }
        });
        lbHide.setEnabled(false);
        btHideChoose.setEnabled(false);
        lbHPath.setVisible(false);
        lbCPath.setVisible(false);
        btEncry.setEnabled(false);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btContainerChoose = new javax.swing.JButton();
        lbCPath = new javax.swing.JLabel();
        lbHide = new javax.swing.JLabel();
        btHideChoose = new javax.swing.JButton();
        lbHPath = new javax.swing.JLabel();
        btEncry = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HIDE IMAGE  ");

        jLabel1.setText("Choose cover Image :");

        btContainerChoose.setText("Choose image");
        btContainerChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btContainerChooseActionPerformed(evt);
            }
        });

        lbCPath.setForeground(new java.awt.Color(140, 56, 104));
        lbCPath.setText("cImg :");

        lbHide.setText("Choose Image to Hide :");

        btHideChoose.setText("Choose image");
        btHideChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHideChooseActionPerformed(evt);
            }
        });

        lbHPath.setForeground(new java.awt.Color(140, 56, 104));
        lbHPath.setText("hImg");

        btEncry.setText("Hide");
        btEncry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEncryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbHide))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btContainerChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btHideChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbCPath, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                    .addComponent(lbHPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(328, Short.MAX_VALUE)
                .addComponent(btEncry, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(294, 294, 294))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btContainerChoose)
                    .addComponent(lbCPath, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbHPath, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbHide, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btHideChoose)))
                .addGap(77, 77, 77)
                .addComponent(btEncry, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btContainerChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btContainerChooseActionPerformed
        // TODO add your handling code here:
        this.containerFile = openFile(containerChooser);
        if (this.containerFile != null) 
        {
            try{
                coverImage = ImageIO.read(this.containerFile);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
            
            lbCPath.setVisible(true);
            String name=containerFile.getName();
            lbCPath.setText(name + ", size: "
                            + containerFile.length() / 1024 + " KB, Pixels(W x H) : "
                            + coverImage.getWidth() + " X  "
                            + coverImage.getHeight());            
            lbHide.setEnabled(true);
            btHideChoose.setEnabled(true);
            
        }
    }//GEN-LAST:event_btContainerChooseActionPerformed

    private void btHideChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHideChooseActionPerformed
        // TODO add your handling code here:
        this.hideFile = openFile(hideChooser);
        if (this.hideFile != null) 
        {
            try{
                hideImage = ImageIO.read(this.hideFile);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
            lbHPath.setVisible(true);
            lbHPath.setEnabled(true);
            String name=hideFile.getName();
            lbHPath.setText(name + ", size: "
                            + hideFile.length() / 1024 + " KB, Pixels(W x H) : "
                            + hideImage.getWidth() + " X "
                            + hideImage.getHeight());        
            btEncry.setEnabled(true);
        }
    }//GEN-LAST:event_btHideChooseActionPerformed

    private void btEncryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEncryActionPerformed
        // TODO add your handling code here:
        BufferedImage container = readImg(this.containerFile);
        if (container != null) {
            if (lsbImageEncoding.hideImage(container, readImg(this.hideFile))) {
              export(container, saveFile(imgSaver));
              reset(imgSaver);
            }
        }
        alert("File is successfully encrypted...");
        setVisible(false);
        dispose();
        new Main(false).setVisible(true);
    }//GEN-LAST:event_btEncryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HideImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HideImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HideImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HideImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        */
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HideImage().setVisible(true);
            }
        });
        alert("Inside main method");
    }
    
    
    /**
  * This method lets the user load a file from a directory using a JFileChooser.
  *
  * @param chooser the JFileChooser that is being used for the loading
     * @return 
  */
  public File openFile(JFileChooser chooser) {
        alert("Inside openFile method ");
        int dialog = chooser.showOpenDialog(this);
        if (dialog == JFileChooser.APPROVE_OPTION) {
        return chooser.getSelectedFile();
        } else if (dialog == JFileChooser.CANCEL_OPTION) {
            return chooser.getSelectedFile();
        } else {
            return new File("");
        }
  }
  
  
  /**
  * This method reads an image from a path and repaints it to an "argb"-type BufferedImage.
  *
  * @param inputFile the file to the image
  */
  public BufferedImage readImg(File inputFile) {
      alert("Inside readImg method...");
    BufferedImage img = null;
    try {
      BufferedImage bildIn = ImageIO.read(inputFile);
      img = new BufferedImage(bildIn.getWidth(), bildIn.getHeight(), BufferedImage.TYPE_INT_ARGB);
      Graphics2D g = img.createGraphics();
      g.drawImage(bildIn, 0, 0, null);
      g.dispose();
    } catch(IOException e) {
      System.out.println(e);
    }
    return img;
  }
  
  
  /**
  * This method lets the user pick a file in a directory using a JFileChooser for saving a file.
  *
  * @param chooser the JFileChooser that is being used
  */
  public File saveFile(JFileChooser chooser) {
      alert("Inside saveFile method...");
   int dialog = chooser.showSaveDialog(this);
   if (dialog == JFileChooser.APPROVE_OPTION) {
     return chooser.getSelectedFile();
   } else if (dialog == JFileChooser.CANCEL_OPTION) {
     return chooser.getSelectedFile();
   } else {
     return new File("");
   }
  }
  
  
  /**
  * This method exports a BufferedImage to an imagefile.
  *
  * @param img the BufferedImage that should be exported
  * @param outputFile the File in which the image should be saved
  */
  public void export(BufferedImage img, File outputFile) {
      alert("Inside export method...");
    try {
      ImageIO.write(img, "png", outputFile);
    } catch(IOException e){
      System.out.println(e);
    }
  }
  
  
  /**
  * This method resets the selected file and directory of a FileChooser.
  *
  * @param chooser the JFileChooser that will be resetted.
  */
  public void reset(JFileChooser chooser) {
      alert("Inside reset method...");
    chooser.setSelectedFile(new File(""));
    chooser.setCurrentDirectory(this.directory);
  }
  
  private static void alert(String message) {
        JOptionPane.showMessageDialog(null, message);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btContainerChoose;
    private javax.swing.JButton btEncry;
    private javax.swing.JButton btHideChoose;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbCPath;
    private javax.swing.JLabel lbHPath;
    private javax.swing.JLabel lbHide;
    // End of variables declaration//GEN-END:variables
}
